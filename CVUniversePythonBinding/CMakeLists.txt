cmake_minimum_required(VERSION 2.8.12)
project(CCNuEUniverse CXX C)

# Include module with function 'write_basic_package_version_file'
include(CMakePackageConfigHelpers)

#Set up different build modes with custom compiler flags.
#I could do this, but a c++17-dependent ROOT build overrides it anyway.
#set( CMAKE_CXX_STANDARD 11 )
#set( CMAKE_CXX_STANDARD_REQUIRED ON )

#I think Heidi disabled warnings about the form() function with -Wformat=0
set( GCC_Flags_For_CXX "-Wall -fPIC -pthread -Wformat=0 -std=c++14" )
set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${GCC_Flags_For_CXX}" )
set( CMAKE_CXX_FLAGS_DEBUG "-ggdb" )

#Required packages
find_package(ROOT REQUIRED COMPONENTS RIO Net OPTIONAL_COMPONENTS Reflex)

if(${ROOT_VERSION} VERSION_LESS 6 AND NOT ${ROOT_Reflex_FOUND})
  MESSAGE(FATAL_ERROR "Reflex is optional except when it's not.  ROOT 6 has Reflex "
                      "support built in, so it doesn't have a separate component "
                      "for Reflex.  Reflex was an experimental feature in ROOT 5, "
                      "so I have to require it as a component there.  You appear to "
                      "be using ${ROOT_VERSION}, so I can't let you get away with "
                      "skipping out on Reflex support!  I need Reflex to build the "
                      "ROOT dictionary for PlotUtils.")
endif()

list(APPEND CMAKE_PREFIX_PATH $ENV{ROOTSYS} $ENV{BOOSTDIR})
#Hack to dodge a bug I'm encountering with ROOT 5.34 on the MINERvA GPVMs but
#not develop of ROOT (6) from mid 2019.  ROOT is failing to set up a variable
#to find genreflex for some weird reason.  It's on PATH when I have the MINERvA
#framework setup, so I'll just go find it myself.
if(NOT ROOT_genreflex_cmd)
  MESSAGE("Hmm, ROOT failed to set up genreflex for some weird reason.  I'll "
          "go off and try to find it myself...")
  find_program(ROOT_genreflex_cmd genreflex)
  if(NOT ROOT_genreflex_cmd)
    MESSAGE(FATAL_ERROR "Failed to find genreflex on PATH!  ROOT is supposed to "
                        "set it up but doesn't seem to on the MINERvA GPVMs with "
                        "ROOT 6.  I need genreflex to build the ROOT dictionary "
                        "for PlotUtils.")
  endif()
endif()

#From Heidi: ---Define useful ROOT functions and macros (e.g. ROOT_GENERATE_DICTIONARY)
include(${ROOT_USE_FILE})
#include_directories(PlotUtils $ENV{PLOTUTILSROOT})
find_package(MAT CONFIG)
find_package(MAT-MINERvA CONFIG)
include_directories(${MAT_INCLUDE_DIR})
include_directories(${MAT_INCLUDE_DIR}/PlotUtils) #Legacy include paths
include_directories(${MAT-MINERvA_INCLUDE_DIR})
#set(libplotutils MAT)
#find_package(PythonLibs REQUIRED) #For pyroot error handling support
#include_directories(${PYTHON_INCLUDE_DIRS})

#All components in this project can refer to other components by
#relative path from the root source code directory.
#include_directories(${CMAKE_SOURCE_DIR})

#From Heidi: put some special flags here forgot what the DBUILD_SHARED_LIBS=OFF does..
#add_definitions(-DFORM -DMNVROOT6 -DPLOTUTILS_STANDALONE "-DBUILD_SHARED_LIBS=OFF")

#From Heidi: do this or mac will make it dylib
set(CMAKE_SHARED_LIBRARY_SUFFIX ".so")
#include_directories(${CMAKE_SOURCE_DIR}/inc)
#link_directories(${CMAKE_SOURCE_DIR}/lib)

REFLEX_GENERATE_DICTIONARY(G__${PROJECT_NAME} ${CMAKE_CURRENT_SOURCE_DIR}/${PROJECT_NAME}Dict.h SELECTION ${CMAKE_CURRENT_SOURCE_DIR}/${PROJECT_NAME}Dict.xml OPTIONS --noIncludePaths)

if(${ROOT_VERSION} VERSION_GREATER 6)
  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/G__${PROJECT_NAME}Dict.rootmap
    DESTINATION lib)
  install(FILES ${CMAKE_CURRENT_BINARY_DIR}/G__${PROJECT_NAME}_rdict.pcm
    DESTINATION lib)

  #In the transition to ROOT 6, dictionary files generated by reflex
  #through ROOT adopted a different naming convention.  The commit
  #that changed this was https://github.com/root-project/root/commit/d62b4fed98805d45079f9863
  set(DICTIONARY_NAME G__${PROJECT_NAME}.cxx)
else(${ROOT_VERSION} VERSION_GREATER 6)
  set(DICTIONARY_NAME G__${PROJECT_NAME}_dict.cpp)
endif(${ROOT_VERSION} VERSION_GREATER 6)

#TODO: Does this give me something to link against to pick up type reflection information?
#The secret ingredient to producing PlotUtils_dict.o seems to be creating an OBJECT library.
add_library(${PROJECT_NAME}_dict OBJECT ${CMAKE_CURRENT_BINARY_DIR}/${DICTIONARY_NAME})

add_library(${PROJECT_NAME} SHARED ${SOURCE_FILES} $<TARGET_OBJECTS:${PROJECT_NAME}_dict>)
set_target_properties(${PROJECT_NAME} PROPERTIES PUBLIC_HEADER "PythonMinervaUniverse.h")
target_link_libraries(${PROJECT_NAME} ${ROOT_LIBRARIES} ${MAT_LIBRARIES} ${MAT-MINERvA_LIBRARIES}) 
install(TARGETS ${PROJECT_NAME} EXPORT ${PROJECT_NAME}Targets DESTINATION lib PUBLIC_HEADER DESTINATION include/PlotUtils) 
#install(FILES ${HEADER_FILES} ${SOURCE_FILES} DESTINATION include/PlotUtils) #Including SOURCE_FILES fo
#install(EXPORT ${PROJECT_NAME}Targets DESTINATION lib/cmake/${PROJECT_NAME})
#export(TARGETS ${PROJECT_NAME} FILE ${CMAKE_CURRENT_BINARY_DIR}/${PROJECT_NAME}Targets.cmake)
